# ~/.config/environment.d/20-dehome.conf
# Reson for not setting these in ~/.config/uwsm/env is var expansion
# Not setting these in shell profile because in the desktop environemnt
# a shell can't be expected (e.g. browser, file manager, Emacs)

# TODO: GnuPG's socketdir depends on the full $GNUPGHOME path INCLUDING
#       the username. While hardcode SSH_AUTH_SOCK works for me, this config
#       IS NOT username agnostic.
#       The same problem also exists for all of the socket units of
#       ${XDG_CONFIG_HOME}/systemd/user/gpg-agent*.socket
# There are a few ways I can think of to resolve this problem:
# 1. Introduce a build system with macro/template, compute the path and fill-in
#    during the build process. The problem with this is the need for a build
#    system, which is almost certainly going to be overcomplicated if the only
#    purpose of it is to resolve GnuPG paths
# 2. Update the environment of systemd at some other place where I have access
#    to a shell, here is the command to do it:
#    dbus-update-activation-environment --systemd SSH_AUTH_SOCK=$(env GNUPGHOME=~/.local/share/gnupg gpgconf --list-dirs agent-ssh-socket)
#    This could be in .zprofile, hyprland.conf, or as a systemd service
#    Problem here is messing with env vars after systemd runs services
#    could cause inconsistency that is hard to diagnose, var defns scattered
#    across multiple files with systemctl restart/reload in between and it
#    also doesn't easily help with sockets.
GNUPGHOME=${XDG_DATA_HOME}/gnupg
SSH_AUTH_SOCK=${XDG_RUNTIME_DIR}/gnupg/d.q7aeot1djg96z6wdinfgskmc/S.gpg-agent.ssh

DOTNET_CLI_HOME=${XDG_DATA_HOME}/dotnet
NUGET_PACKAGES=${XDG_CACHE_HOME}/NuGetPackages
OMNISHARPHOME=${XDG_CONFIG_HOME}/omnisharp

PASSWORD_STORE_DIR=${XDG_DATA_HOME}/password-store
